"""Functions for input/output handling."""

# Standard libraries
import os
import sys
from datetime import datetime

# Third-party libraries
import mdtools as mdt
import numpy as np

# First-party libraries
import lintf2_ether_ana_postproc as leap


def run_time_info():
    """
    Generate some run time information.

    Returns
    -------
    script_name : str
        The name of the running script.
    command_line : str
        The command line input used to start the script.
    cwd : str
        The working directory the script was started from.
    exe : str
        The exact call of the executable script.
    version : str
        The used version of lintf2_ether_ana_postproc.
    version_py : str
        The used Python version.

    See Also
    --------
    :func:`lintf2_ether_ana_postproc.io_handler.run_time_info_str` :
        Create a string containing some run time information
    """
    script_name = str(os.path.basename(sys.argv[0]))
    command_line = script_name + " " + " ".join(sys.argv[1:])
    version_py = ".".join(str(i) for i in sys.version_info[:3])
    return (
        script_name,
        command_line,
        os.getcwd(),
        sys.argv[0],
        leap.__version__,
        version_py,
    )


def run_time_info_str(indent=0):
    """
    Create a string containing some run time information.

    The string can be printed directly to standard output using
    :func:`print`.

    The information contained in the string is:

        * The date and time this function was called.
        * The copyright notice of lintf2_ether_ana_postproc.
        * The information generated by
          :func:`lintf2_ether_ana_postproc.io_handler.run_time_info`.

    Parameters
    ----------
    indent : int, optional
        Number of spaces to indent the information string.  Negative
        indentation is treated as zero indentation.

    Returns
    -------
    rti : str
        Human readable string containing the above listed content.

    See Also
    --------
    :func:`lintf2_ether_ana_postproc.io_handler.run_time_info` :
        Generate some run time information
    :func:`lintf2_ether_ana_postproc.io_handler.header_str` :
        Create a string containing some run time information to be used
        as header for text files
    """
    timestamp = datetime.now()
    script, command_line, cwd, exe, version, version_py = run_time_info()
    rti = "{}\n".format(script)
    rti += "{}\n".format(timestamp.strftime("%Y/%m/%d %H:%M"))
    rti += "\n"
    rti += leap.__copyright_notice__ + "\n"
    rti += "\n"
    rti += "\n"
    rti += "Command line input:\n"
    rti += "  {}\n".format(command_line)
    rti += "Working directory:\n"
    rti += "  {}\n".format(cwd)
    rti += "Executable:\n"
    rti += "  {}\n".format(exe)
    rti += "{} version:\n".format(leap.__title__)
    rti += "  {}\n".format(version)
    rti += "Python version:\n"
    rti += "  {}".format(version_py)
    if indent > 0:
        rti = mdt.fh.indent(rti, amount=indent, char=" ")
    return rti


def header_str():
    """
    Create a standard header string for text files.

    The string can be printed directly to standard output using
    :func:`print`.

    The header string contains:

        * The date and time the text file was created (actually this
          function was called).
        * The information generated by
          :func:`lintf2_ether_ana_postproc.file_handler.run_time_info`.

    Returns
    -------
    header : str
        Human readable string containing the above listed content.

    See Also
    --------
    :func:`lintf2_ether_ana_postproc.io_handler.run_time_info_str` :
        Create a string containing some run time information
    """
    timestamp = datetime.now()
    script, command_line, cwd, exe, version, version_py = run_time_info()
    header = "Created by {} on {}\n".format(
        script, timestamp.strftime("%Y/%m/%d %H:%M:%S")
    )
    header += "\n"
    header += leap.__copyright_notice__ + "\n"
    header += "\n"
    header += "Command line input:\n"
    header += "  {}\n".format(command_line)
    header += "Working directory:\n"
    header += "  {}\n".format(cwd)
    header += "Executable:\n"
    header += "  {}\n".format(exe)
    header += "{} version:\n".format(leap.__title__)
    header += "  {}\n".format(version)
    header += "Python version:\n"
    header += "  {}\n".format(version_py)
    return header


def write_header(fname, **kwargs):
    """
    Write the standard lintf2_ether_ana_postproc header to file.

    See :func:`lintf2_ether_ana_postproc.io_handler.header_str` for
    further information about what is contained in the header.

    Parameters
    ----------
    fname : str or bytes or os.PathLike
        The name of the file to which to write the header.
    kwargs : dict, optional
        Additional keyword arguments to parse to
        :func:`mdtools.file_handler.xopen`.  See there for possible
        arguments and their description.  By default, `mode` is set to
        ``'wt'`` (open file for writing in text mode, truncating the
        file first).

    See Also
    --------
    :func:`lintf2_ether_ana_postproc.io_handler.header_str` :
        Create a standard header string for text files
    """
    kwargs.setdefault("mode", "wt")
    with mdt.fh.xopen(fname, **kwargs) as outfile:
        outfile.write(
            mdt.fh.indent(leap.io_handler.header_str(), amount=1, char="# ")
        )


def savetxt(fname, data, rename=True, **kwargs):
    """
    Save an array to a text file.

    Parameters
    ----------
    fname : str or os.PathLike
        The name of the file to create.
    data : array_like
        1- or 2-dimensional array of data to be saved.
    rename : bool, optional
        If ``True`` and a file called `fname` already exists, rename it
        to ``'fname.bak_timestamp'``.  See
        :func:`mdtools.file_handler.backup` for more details.
    kwargs : dict, optional
        Additional keyword arguments to parse to :func:`numpy.savetxt`.
        See there for possible arguments and their description.  By
        default, `fmt` is set to ``'%16.9e'``.

    See Also
    --------
    :func:`numpy.savetxt` :
        Save an array to a text file
    :func:`lintf2_ether_ana_postproc.io_handler.header_str` :
        Create a standard header string for text files

    Notes
    -----
    This function simply calls :func:`numpy.savetxt` and adds a
    lintf2_ether_ana_postproc specific header to the output file.  See
    :func:`lintf2_ether_ana_postproc.io_handler.header_str` for further
    information about what is included in the header.
    """
    fname = os.fspath(fname)
    kwargs.setdefault("fmt", "%16.9e")
    header = kwargs.pop("header", None)
    if header is None or header.strip() == "":
        header = leap.io_handler.header_str()
    else:
        header = leap.io_handler.header_str() + "\n\n" + header
    kwargs["header"] = header
    if rename:
        mdt.fh.backup(fname)
    np.savetxt(fname, data, **kwargs)
